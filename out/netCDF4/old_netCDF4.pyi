import types
from typing import Any, overload

import _cython_3_0_4
from _typeshed import Incomplete

NC_DISKLESS: int
NC_PERSIST: int
__has_blosc_support__: int
__has_bzip2_support__: int
__has_cdf5_format__: int
__has_nc_create_mem__: int
__has_nc_inq_format_extended__: int
__has_nc_inq_path__: int
__has_nc_open_mem__: int
__has_parallel4_support__: int
__has_pnetcdf_support__: int
__has_quantization_support__: int
__has_rename_grp__: int
__has_set_alignment__: int
__has_szip_support__: int
__has_zstandard_support__: int
__hdf5libversion__: str
__netcdf4libversion__: str
__reduce_cython__: _cython_3_0_4.cython_function_or_method
__setstate_cython__: _cython_3_0_4.cython_function_or_method
__test__: dict
__version__: str
chartostring: _cython_3_0_4.cython_function_or_method
default_encoding: str
default_fillvals: dict
get_alignment: _cython_3_0_4.cython_function_or_method
get_chunk_cache: _cython_3_0_4.cython_function_or_method
getlibversion: _cython_3_0_4.cython_function_or_method
is_native_big: bool
is_native_little: bool
set_alignment: _cython_3_0_4.cython_function_or_method
set_chunk_cache: _cython_3_0_4.cython_function_or_method
stringtoarr: _cython_3_0_4.cython_function_or_method
stringtochar: _cython_3_0_4.cython_function_or_method
unicode_error: str

class CompoundType:
    dtype: Incomplete
    dtype_view: Incomplete
    name: Incomplete
    def __init__(self, group, datatype, datatype_name) -> None: ...
    def __reduce__(self): ...

class Dataset:
    _ncstring_attrs__: Incomplete
    cmptypes: Incomplete
    data_model: Incomplete
    dimensions: Incomplete
    disk_format: Incomplete
    enumtypes: Incomplete
    file_format: Incomplete
    groups: Incomplete
    keepweakref: Incomplete
    name: Incomplete
    parent: Incomplete
    path: Incomplete
    variables: Incomplete
    vltypes: Incomplete
    __orthogonal_indexing__: Incomplete
    def __init__(
        self,
        filename,
        mode=...,
        clobber=...,
        diskless=...,
        persist=...,
        keepweakref=...,
        memory=...,
        encoding=...,
        parallel=...,
        comm=...,
        info=...,
        format=...,
    ) -> None: ...
    def close(self) -> Any: ...
    def createCompoundType(self, datatype, datatype_name) -> Any: ...
    def createDimension(self, dimname, size=...) -> Any: ...
    def createEnumType(self, datatype, datatype_name, enum_dict) -> Any: ...
    def createGroup(self, groupname) -> Any: ...
    def createVLType(self, datatype, datatype_name) -> Any: ...
    def createVariable(
        self,
        varname,
        datatype,
        dimensions=...,
        compression=...,
        zlib=...,
        complevel=...,
        shuffle=...,
        fletcher32=...,
        contiguous=...,
        chunksizes=...,
        szip_coding=...,
        szip_pixels_per_block=...,
        blosc_shuffle=...,
        endian=...,
        least_significant_digit=...,
        significant_digits=...,
        quantize_mode=...,
        fill_value=...,
        chunk_cache=...,
    ) -> Any: ...
    def delncattr(self, name, value) -> Any: ...
    def filepath(self, encoding=...) -> Any: ...
    def fromcdl(self, cdlfilename, ncfilename=..., mode=..., format=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, **kwargs) -> Any: ...
    @overload
    def get_variables_by_attributes(self, axis=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, standard_name=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, axis=...) -> None: ...
    @overload
    def get_variables_by_attributes(self, axis=...) -> None: ...
    @overload
    def get_variables_by_attributes(self, grid_mapping=...) -> Any: ...
    def getncattr(self, name) -> Any: ...
    def has_blosc_filter(self) -> Any: ...
    def has_bzip2_filter(self) -> Any: ...
    def has_szip_filter(self) -> Any: ...
    def has_zstd_filter(self) -> Any: ...
    def isopen(self) -> Any: ...
    def ncattrs(self) -> Any: ...
    def renameAttribute(self, oldname, newname) -> Any: ...
    def renameDimension(self, oldname, newname) -> Any: ...
    def renameGroup(self, oldname, newname) -> Any: ...
    def renameVariable(self, oldname, newname) -> Any: ...
    def set_always_mask(self, True_or_False) -> Any: ...
    def set_auto_chartostring(self, True_or_False) -> Any: ...
    def set_auto_mask(self, True_or_False) -> Any: ...
    def set_auto_maskandscale(self, True_or_False) -> Any: ...
    def set_auto_scale(self, True_or_False) -> Any: ...
    def set_fill_off(self) -> Any: ...
    def set_fill_on(self) -> Any: ...
    def set_ncstring_attrs(self, True_or_False) -> Any: ...
    def setncattr(self, name, value) -> Any: ...
    def setncattr_string(self, name, value) -> Any: ...
    def setncatts(self, attdict) -> Any: ...
    def sync(self) -> Any: ...
    def tocdl(self, coordvars=..., data=..., outfile=...) -> Any: ...
    def __delattr__(self, name): ...
    def __enter__(self): ...
    def __exit__(
        self,
        type: type[BaseException] | None,
        value: BaseException | None,
        traceback: types.TracebackType | None,
    ): ...
    def __getattr__(self, name): ...
    def __getitem__(self, index): ...
    def __reduce__(self): ...
    def __setattr__(self, name, value): ...

class Dimension:
    name: Incomplete
    size: Incomplete
    def __init__(self, group, name, size=...) -> None: ...
    def group(self) -> Any: ...
    def isunlimited(self) -> Any: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class EnumType:
    dtype: Incomplete
    enum_dict: Incomplete
    name: Incomplete
    def __init__(self, group, datatype, datatype_name, enum_dict) -> None: ...
    def __reduce__(self): ...

class Group(Dataset):
    def __init__(self, parent, name) -> None: ...
    def close(self) -> Any: ...

class MFDataset(Dataset):
    def __init__(
        self, files, check=..., aggdim=..., exclude=..., master_file=...
    ) -> None: ...
    def close(self) -> Any: ...
    def isopen(self) -> Any: ...
    def ncattrs(self) -> Any: ...
    def __reduce__(self): ...
    def __setattr__(self, name, value): ...

class MFTime(_Variable):
    def __init__(self, time, units=..., calendar=...) -> None: ...
    def __getitem__(self, index): ...

class VLType:
    dtype: Incomplete
    name: Incomplete
    def __init__(self, group, datatype, datatype_name) -> None: ...
    def __reduce__(self): ...

class Variable:
    _ncstring_attrs__: Incomplete
    always_mask: Incomplete
    chartostring: Incomplete
    datatype: Incomplete
    dimensions: Incomplete
    dtype: Incomplete
    mask: Incomplete
    name: Incomplete
    ndim: Incomplete
    scale: Incomplete
    shape: Incomplete
    size: Incomplete
    __orthogonal_indexing__: Incomplete
    def __init__(
        self,
        group,
        name,
        datatype,
        dimensions=...,
        compression=...,
        zlib=...,
        complevel=...,
        shuffle=...,
        szip_coding=...,
        szip_pixels_per_block=...,
        blosc_shuffle=...,
        fletcher32=...,
        contiguous=...,
        chunksizes=...,
        endian=...,
        least_significant_digit=...,
        fill_value=...,
        chunk_cache=...,
    ) -> None: ...
    def assignValue(self, val) -> Any: ...
    def chunking(self) -> Any: ...
    def delncattr(self, name, value) -> Any: ...
    def endian(self) -> Any: ...
    def filters(self) -> Any: ...
    def getValue(self) -> Any: ...
    def get_dims(self) -> Any: ...
    def get_var_chunk_cache(self) -> Any: ...
    def getncattr(self, name) -> Any: ...
    def group(self) -> Any: ...
    def ncattrs(self) -> Any: ...
    def quantization(self) -> Any: ...
    def renameAttribute(self, oldname, newname) -> Any: ...
    def set_always_mask(self, always_mask) -> Any: ...
    def set_auto_chartostring(self, chartostring) -> Any: ...
    def set_auto_mask(self, mask) -> Any: ...
    def set_auto_maskandscale(self, maskandscale) -> Any: ...
    def set_auto_scale(self, scale) -> Any: ...
    def set_collective(self, True_or_False) -> Any: ...
    def set_ncstring_attrs(self, *args, **kwargs): ...
    def set_var_chunk_cache(self, size=..., nelems=..., preemption=...) -> Any: ...
    def setncattr(self, name, value) -> Any: ...
    def setncattr_string(self, name, value) -> Any: ...
    def setncatts(self, attdict) -> Any: ...
    def use_nc_get_vars(self, _use_get_vars) -> Any: ...
    def __array__(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __getattr__(self, name): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...

class _Dimension:
    def __init__(self, *args, **kwargs) -> None: ...
    def isunlimited(self, *args, **kwargs): ...
    def __len__(self) -> int: ...

class _MemBuf:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...

class _Variable:
    def __init__(self, *args, **kwargs) -> None: ...
    def ncattrs(self, *args, **kwargs): ...
    def set_always_mask(self, *args, **kwargs): ...
    def set_auto_chartostring(self, *args, **kwargs): ...
    def set_auto_mask(self, *args, **kwargs): ...
    def set_auto_maskandscale(self, *args, **kwargs): ...
    def set_auto_scale(self, *args, **kwargs): ...
    def typecode(self, *args, **kwargs): ...
    def __getattr__(self, name): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
